apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.Chart.Name}}-backend
  labels:
    app: {{ .Chart.Name }}
    chart: "{{ .Chart.Name }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: 3
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
      chart: "{{ .Chart.Name }}"
      release: "{{ .Release.Name }}"
      heritage: "{{ .Release.Service }}"
      name: {{ .Chart.Name }}-backend
      tier: backend
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
        chart: "{{ .Chart.Name }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
        name: {{.Chart.Name}}-backend
        tier: backend
    spec:
      containers:
        - name: {{.Chart.Name}}-backend
          image: "{{.Values.backend.deployment.image.tag}}:{{.Values.backend.deployment.image.version}}"
          imagePullPolicy: "{{.Values.backend.deployment.image.pullPolicy}}"
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{.Values.postgresql.auth.existingSecret}}"
                  key: "{{.Values.postgresql.auth.secretKeys.userPasswordKey}}"
            - name: PRODUCTION
              valueFrom:
                configMapKeyRef:
                  name: {{.Chart.Name}}-{{.Values.backend.deployment.configName}}          # The ConfigMap this value comes from.
                  key: production               # The key to fetch.
            - name: API_PREFIX
              valueFrom:
                configMapKeyRef:
                  name: {{.Chart.Name}}-{{.Values.backend.deployment.configName}}          # The ConfigMap this value comes from.
                  key: api_prefix               # The key to fetch.
            - name: DB_USER
              valueFrom:
                configMapKeyRef:
                  name: {{.Chart.Name}}-{{.Values.backend.deployment.configName}}          # The ConfigMap this value comes from.
                  key: db_user               # The key to fetch.
            - name: DB_DRIVER
              valueFrom:
                configMapKeyRef:
                  name: {{.Chart.Name}}-{{.Values.backend.deployment.configName}}          # The ConfigMap this value comes from.
                  key: db_driver               # The key to fetch.
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: {{.Chart.Name}}-{{.Values.backend.deployment.configName}}          # The ConfigMap this value comes from.
                  key: db_host               # The key to fetch.
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  name: {{.Chart.Name}}-{{.Values.backend.deployment.configName}}          # The ConfigMap this value comes from.
                  key: db_port               # The key to fetch.
            - name: SINGLE_NODE
              valueFrom:
                configMapKeyRef:
                  name: {{.Chart.Name}}-{{.Values.backend.deployment.configName}}          # The ConfigMap this value comes from.
                  key: single_node               # The key to fetch.
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{.Chart.Name}}-{{.Values.backend.deployment.configName}}          # The ConfigMap this value comes from.
                  key: db_name               # The key to fetch.
                
          ports:
            - containerPort: {{.Values.backend.deployment.ports.containerPort}}
          # add live and readiness probes for Google cloud load balancer
          # https://cloud.google.com/kubernetes-engine/docs/how-to/container-health-checks
          readinessProbe:
            httpGet:
              path: "api/version"
              port: {{.Values.backend.deployment.ports.containerPort}}

      initContainers:
        - name: {{.Chart.Name}}-wait-for-postgresql
          image: busybox
          command: [ "sh", "-c", "until timeout 1 nc -z $DB_HOST $DB_PORT; do echo waiting for postgres; sleep 1; done" ]
          env:
            - name: DB_HOST
              value: "{{.Values.backend.deployment.config.dbHost}}"
            - name: DB_PORT
              value: "{{.Values.backend.deployment.config.dbPort}}"

